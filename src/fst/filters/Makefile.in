# Makefile.in generated by automake 1.16.5 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

#########################################################
############## BEGIN: Local modifications ###############

###########################################
########## LexC build rules. ##########
###########################################

####### HFST build rules: ########

###########################################
########## XFScript build rules. ##########
###########################################

# *.gt.* designates the tagset being used.
# At the end of the makefile, there is support for automatic compilation of
# other tagsets, given that the proper tagset relabeling files are defined,
# and that the target files are defined as part of the 'all' target.
#
# Filenames are built as follows:
# basictype-application-tagset-normativity[-dialect].fsttype
#
# 'application' is not specified for the regular/default morphological
# analysis/generation.
#
# Examples:
# analyser-oahpa-gt-desc.hfst
# generator-apertium-apertium-norm_single.hfst
# analyser-gt-desc.xfst
#
# Full details regarding transducer filenames can be found at:
#
# https://giellalt.uit.no/infra/infraremake/TransducerNamesInTheNewInfra.html

#### Tailored silent output text: ####

#### HFST tools
# Tools not yet covered by this file:
#
# hfst-determinize
# hfst-fst2strings
# hfst-info
# hfst-minus
# hfst-multiply
# hfst-pair-test
# hfst-pmatch
# hfst-push-weights
# hfst-remove-epsilons
# hfst-shuffle
# hfst-subtract
# hfst-summarize
# hfst-tokenize

# DESCRIPTION:
#
# Makefile to extract tags from a transducer. To be included from other
# Makefile's.
#
# Requirement: tag _must_ start with or end with a plus ('+').

VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
# Generate the filter targets from the source filenames:
@CAN_HFST_TRUE@am__append_1 = $(patsubst %.regex,%.hfst,$(REGEX_SRCS)) \
@CAN_HFST_TRUE@	$(patsubst %.xfscript,%.hfst,$(XFSCRIPT_SRCS)) \
@CAN_HFST_TRUE@	$(patsubst %.lexc,%.hfst,$(LEXC_SRCS))
@CAN_XFST_TRUE@am__append_2 = $(patsubst %.regex,%.xfst,$(REGEX_SRCS)) \
@CAN_XFST_TRUE@	$(patsubst %.xfscript,%.xfst,$(XFSCRIPT_SRCS)) \
@CAN_XFST_TRUE@	$(patsubst %.lexc,%.xfst,$(LEXC_SRCS))
@CAN_FOMA_TRUE@am__append_3 = $(patsubst %.regex,%.foma,$(REGEX_SRCS)) \
@CAN_FOMA_TRUE@	$(patsubst %.xfscript,%.foma,$(XFSCRIPT_SRCS)) \
@CAN_FOMA_TRUE@	$(patsubst %.lexc,%.foma,$(LEXC_SRCS))
subdir = src/fst/filters
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_check_gnu_make.m4 \
	$(top_srcdir)/m4/ax_compare_version.m4 \
	$(top_srcdir)/m4/ax_python_module.m4 \
	$(top_srcdir)/m4/giella-config-files.m4 \
	$(top_srcdir)/m4/giella-macros.m4 $(top_srcdir)/m4/hfst.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
DATA = $(noinst_DATA)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(top_srcdir)/../giella-core/am-shared/dot-generated-dir.am \
	$(top_srcdir)/../giella-core/am-shared/hfst-format-include.am \
	$(top_srcdir)/../giella-core/am-shared/lexc-include.am \
	$(top_srcdir)/../giella-core/am-shared/regex-include.am \
	$(top_srcdir)/../giella-core/am-shared/silent_build-include.am \
	$(top_srcdir)/../giella-core/am-shared/src-filters-dir-include.am \
	$(top_srcdir)/../giella-core/am-shared/tag-extraction-include.am \
	$(top_srcdir)/../giella-core/am-shared/xfscript-include.am
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
ALT_ORTHS = @ALT_ORTHS@
ALT_WSS = @ALT_WSS@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AREAS = @AREAS@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BC = @BC@
CG3_CFLAGS = @CG3_CFLAGS@
CG3_LIBS = @CG3_LIBS@
CGFLOOKUP = @CGFLOOKUP@
CG_MWESPLIT = @CG_MWESPLIT@
CG_RELABEL = @CG_RELABEL@
CSCOPE = @CSCOPE@
CTAGS = @CTAGS@
CYGPATH_W = @CYGPATH_W@
CYGWINJAVAPATH = @CYGWINJAVAPATH@
DEFAULT_ANALYSERS = @DEFAULT_ANALYSERS@
DEFAULT_CUSTOM_FSTS = @DEFAULT_CUSTOM_FSTS@
DEFAULT_FOMA = @DEFAULT_FOMA@
DEFAULT_GENERATORS = @DEFAULT_GENERATORS@
DEFAULT_HFST = @DEFAULT_HFST@
DEFAULT_HFST_BACKEND = @DEFAULT_HFST_BACKEND@
DEFAULT_HYPERMIN = @DEFAULT_HYPERMIN@
DEFAULT_ORTH = @DEFAULT_ORTH@
DEFAULT_REVERCI = @DEFAULT_REVERCI@
DEFAULT_SPELLER_MINIMISATION = @DEFAULT_SPELLER_MINIMISATION@
DEFAULT_WS = @DEFAULT_WS@
DEFAULT_XFST = @DEFAULT_XFST@
DEFS = @DEFS@
DIALECTS = @DIALECTS@
DIFFTOOL = @DIFFTOOL@
DIVVUN_ACCURACY = @DIVVUN_ACCURACY@
DIVVUN_CHECKER = @DIVVUN_CHECKER@
DIVVUN_VALIDATE_SUGGEST = @DIVVUN_VALIDATE_SUGGEST@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
ETAGS = @ETAGS@
FLOOKUP = @FLOOKUP@
FOMA = @FOMA@
FORREST = @FORREST@
GAWK = @GAWK@
GIELLA_CORE = @GIELLA_CORE@
GIELLA_CORE_VERSION = @GIELLA_CORE_VERSION@
GLANG = @GLANG@
GLANG2 = @GLANG2@
GLANGUAGE = @GLANGUAGE@
GRAMCHECKVERSION = @GRAMCHECKVERSION@
GTCORE = @GTCORE@
GTCORESH = @GTCORESH@
GTLANG = @GTLANG@
GTLANG2 = @GTLANG2@
GTLANGUAGE = @GTLANGUAGE@
GZIP = @GZIP@
HFST_COMPOSE = @HFST_COMPOSE@
HFST_COMPOSE_INTERSECT = @HFST_COMPOSE_INTERSECT@
HFST_CONCATENATE = @HFST_CONCATENATE@
HFST_CONJUNCT = @HFST_CONJUNCT@
HFST_DETERMINIZE = @HFST_DETERMINIZE@
HFST_DISJUNCT = @HFST_DISJUNCT@
HFST_FOMA = @HFST_FOMA@
HFST_FORMAT_NAME = @HFST_FORMAT_NAME@
HFST_FST2FST = @HFST_FST2FST@
HFST_FST2STRINGS = @HFST_FST2STRINGS@
HFST_FST2TXT = @HFST_FST2TXT@
HFST_INFO = @HFST_INFO@
HFST_INTERSECT = @HFST_INTERSECT@
HFST_INVERT = @HFST_INVERT@
HFST_LEXC = @HFST_LEXC@
HFST_LOOKUP = @HFST_LOOKUP@
HFST_MINIMIZE = @HFST_MINIMIZE@
HFST_MINIMIZE_SPELLER = @HFST_MINIMIZE_SPELLER@
HFST_MINUS = @HFST_MINUS@
HFST_MULTIPLY = @HFST_MULTIPLY@
HFST_NAME = @HFST_NAME@
HFST_OPTIMIZED_LOOKUP = @HFST_OPTIMIZED_LOOKUP@
HFST_OSPELL = @HFST_OSPELL@
HFST_PAIR_TEST = @HFST_PAIR_TEST@
HFST_PMATCH2FST = @HFST_PMATCH2FST@
HFST_PROC = @HFST_PROC@
HFST_PROJECT = @HFST_PROJECT@
HFST_PRUNE_ALPHABET = @HFST_PRUNE_ALPHABET@
HFST_PUSH_WEIGHTS = @HFST_PUSH_WEIGHTS@
HFST_REGEXP2FST = @HFST_REGEXP2FST@
HFST_REMOVE_EPSILONS = @HFST_REMOVE_EPSILONS@
HFST_REPEAT = @HFST_REPEAT@
HFST_REVERSE = @HFST_REVERSE@
HFST_REWEIGHT = @HFST_REWEIGHT@
HFST_SPLIT = @HFST_SPLIT@
HFST_STRINGS2FST = @HFST_STRINGS2FST@
HFST_SUBSTITUTE = @HFST_SUBSTITUTE@
HFST_SUBTRACT = @HFST_SUBTRACT@
HFST_SUMMARIZE = @HFST_SUMMARIZE@
HFST_TOKENISE = @HFST_TOKENISE@
HFST_TWOLC = @HFST_TWOLC@
HFST_TXT2FST = @HFST_TXT2FST@
HFST_XFST = @HFST_XFST@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
JV = @JV@
LEXC = @LEXC@
LEXREF_IN_XFSCRIPT = @LEXREF_IN_XFSCRIPT@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LOOKUP = @LOOKUP@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
NO_PHONOLOGY = @NO_PHONOLOGY@
NPM = @NPM@
ONMT_BUILD_VOCAB = @ONMT_BUILD_VOCAB@
ONMT_TRAIN = @ONMT_TRAIN@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATGEN = @PATGEN@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@
PKG_CONFIG_PATH = @PKG_CONFIG_PATH@
PRINTF = @PRINTF@
PYTHON = @PYTHON@
PYTHON_EXEC_PREFIX = @PYTHON_EXEC_PREFIX@
PYTHON_PLATFORM = @PYTHON_PLATFORM@
PYTHON_PREFIX = @PYTHON_PREFIX@
PYTHON_VERSION = @PYTHON_VERSION@
R = @R@
RSYNC = @RSYNC@
SAXON = @SAXON@
SAXONJAR = @SAXONJAR@
SED = @SED@
SEE = @SEE@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SPELLERVERSION = @SPELLERVERSION@
SPELLER_DESC_ENG = @SPELLER_DESC_ENG@
SPELLER_DESC_NATIVE = @SPELLER_DESC_NATIVE@
SPELLER_NAME_ENG = @SPELLER_NAME_ENG@
SPELLER_NAME_NATIVE = @SPELLER_NAME_NATIVE@
STRIP = @STRIP@
TAR = @TAR@
TWOLC = @TWOLC@
UCONV = @UCONV@
VERSION = @VERSION@
VISLCG3 = @VISLCG3@
VISLCG3_COMP = @VISLCG3_COMP@
VOIKKOGC = @VOIKKOGC@
VOIKKOHYPHENATE = @VOIKKOHYPHENATE@
VOIKKOSPELL = @VOIKKOSPELL@
VOIKKOVFSTC = @VOIKKOVFSTC@
WGET = @WGET@
XFST = @XFST@
XZ = @XZ@
ZIP = @ZIP@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
am__leading_dot = @am__leading_dot@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
gt_SHARED_common = @gt_SHARED_common@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
ifGNUmake = @ifGNUmake@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
pkgpyexecdir = @pkgpyexecdir@
pkgpythondir = @pkgpythondir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
pyexecdir = @pyexecdir@
pythondir = @pythondir@
runstatedir = @runstatedir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@

# List any local filter regex files here:
GIELLA_FILTER_LOCAL_REGEX_SRCS = \
					downcase_UCletters.regex\
					remove-derivation-position-tags.regex \
					remove-DNorm-tags.regex \
					remove-norm-comp-tags.regex \
					rename-POS_before_Der-tags.regex


# List any local filter xfscript files here:
GIELLA_FILTER_LOCAL_XFSCRIPT_SRCS = 

# List any local filter lexc files here:
GIELLA_FILTER_LOCAL_LEXC_SRCS = 

# List any locally generated regex source files here:
GIELLA_FILTER_LOCAL_GENERATED_REGEX_SRCS = 

# List any locally generated xfscript source files here:
GIELLA_FILTER_LOCAL_GENERATED_XFSCRIPT_SRCS = 

# List any locally generated lexc source files here:
GIELLA_FILTER_LOCAL_GENERATED_LEXC_SRCS = 

# List any additional source files here, so that they are included in the dist.
# Source files that are not directly compiled to fst's but are instead used as
# part of a local build step should be listed here.
EXTRA_SRCS = 

####### Compilation variables: #######
HFST_REGEXP2FST_FLAGS = --xerox-composition=ON

####### Source file defs: ########
# 1) GiellaLT Core regex files:
GIELLA_FILTER_CORE_REGEX_SRCS = \
				block-mwe-compounds.regex                 \
				extract-Sem_Plc-strings.regex             \
				make-optional-adv_comp-tags.regex         \
				make-optional-final_full_stops.regex      \
				make-optional-homonymy-tags.regex         \
				make-optional-hyph-tags.regex             \
				make-optional-NGminip-tags.regex          \
				make-optional-transitivity-tags.regex     \
				make-optional-v1-tags.regex               \
				make-optional-variant-tags.regex          \
				remove-adv_comp-tags.regex                \
				remove-homonymy-tags.regex                \
				remove-mwe-tags.regex                     \
				remove-number-string-tags.regex           \
				remove-orig_lang-tags.regex               \
				remove-orthography-tags.regex             \
				remove-transitivity-tags.regex            \
				remove-usage_except_NGminip-tags.regex    \
				remove-usage_except_speller-tags.regex    \
				remove-variant-tags.regex                 \
				remove-hyphenation-marks.regex            \
				remove-infl_boundary-marks.regex          \
				remove-infl_deriv-borders.regex           \
				remove-nonfirst_infl_boundary-marks.regex \
				remove-word-boundary.regex                \
				remove-ABBR-strings.regex                 \
				remove-ACR-strings.regex                  \
				remove-CLB-strings.regex                  \
				remove-hyphenated-strings.regex           \
				remove-non_hyphenated-strings.regex       \
				remove-MinusSpell-strings.regex           \
				remove-mwe-strings.regex                  \
				remove-NA-strings.regex                   \
				remove-NG-strings.regex                   \
				remove-NGminip-strings.regex              \
				remove-Orth_IPA-strings.regex             \
				remove-Orth_Strd-strings.regex            \
				remove-Prop-strings.regex                 \
				remove-PUNCT-strings.regex                \
				remove-RCmpnd-strings.regex               \
				remove-Use_PMatch-strings.regex           \
				remove-Use_PMatch-tags.regex              \
				remove-Use_minus_PMatch-strings.regex     \
				remove-Use_minus_PMatch-tags.regex        \
				remove-Use_GC-strings.regex               \
				remove-Use_GC-tags.regex                  \
				remove-Use_minusGC-strings.regex          \
				remove-Use_minusGC-tags.regex             \
				remove-Use_TTS-strings.regex	          \
				remove-Use_TTS-tags.regex		          \
				remove-Use_minusTTS-strings.regex         \
				remove-Use_minusTTS-tags.regex	          \
				remove-UseCirc-strings.regex              \
				remove-use_marg-strings.regex             \
				remove-use_mt-strings.regex               \
				remove-variant-strings.regex              \
				reorder-subpos-tags.regex                 \
				replace-hyphenation-chars.regex           \
				tag-lowercase_error-strings.regex         \
				extract-OLang_ENG-strings.regex           \
				extract-OLang_FIN-strings.regex           \
				extract-OLang_NNO-strings.regex           \
				extract-OLang_NOB-strings.regex           \
				extract-OLang_SME-strings.regex           \
				extract-OLang_SWE-strings.regex           \
				remove-OLang_ENG-strings.regex            \
				remove-OLang_FIN-strings.regex            \
				remove-OLang_NNO-strings.regex            \
				remove-OLang_NOB-strings.regex            \
				remove-OLang_SME-strings.regex            \
				remove-OLang_SWE-strings.regex            \
				remove-OLang_UND-strings.regex


# 2) GiellaLT Core **generated** regex files:
GIELLA_FILTER_CORE_GENERATED_REGEX_SRCS = \
				make-optional-area-tags.regex                 \
				make-optional-derivation-tags.regex           \
				make-optional-dialect-tags.regex              \
				make-optional-error-tags.regex                \
				make-optional-grammatical-tags.regex          \
				make-optional-orig_lang-tags.regex            \
				make-optional-semantic-tags.regex             \
				remove-derivation-strings.regex               \
				remove-error-strings.regex                    \
				remove-area-tags.regex                        \
				remove-derivation-tags.regex                  \
				remove-dialect-tags.regex                     \
				remove-error-tags.regex                       \
				remove-grammatical-tags.regex                 \
				remove-orig_lang-tags.regex                   \
				remove-usage-tags.regex                       \
				remove-semantic-tags.regex                    \
				remove-semantic-tags-before-derivations.regex \
				reorder-semantic-tags.regex                   \
				$(DIALECT_REGEXES)                            \
				$(AREA_INCONSISTENT_REGEX)                    \
				$(AREA_INSERT_TAGS_REGEX)                     \
				$(AREA_REGEXES)


# 3) GTD Core xfscript filter files:
GIELLA_FILTER_CORE_XFSCRIPT_SRCS = 

# 4) GTD Core **generated** xfscript files:
GIELLA_FILTER_CORE_GENERATED_XFSCRIPT_SRCS = 

# 5) GTD Core lexc filter files:
GIELLA_FILTER_CORE_LEXC_SRCS = 

# 6) GTD Core **generated** lexc files:
GIELLA_FILTER_CORE_GENERATED_LEXC_SRCS = 

# Variable for all source files - regex:
REGEX_SRCS = $(GIELLA_FILTER_CORE_REGEX_SRCS) \
		   $(GIELLA_FILTER_LOCAL_REGEX_SRCS) \
		   $(GIELLA_FILTER_CORE_GENERATED_REGEX_SRCS) \
		   $(GIELLA_FILTER_LOCAL_GENERATED_REGEX_SRCS)


# Variable for all source files - xfscript:
XFSCRIPT_SRCS = \
			$(GIELLA_FILTER_CORE_XFSCRIPT_SRCS) \
			$(GIELLA_FILTER_LOCAL_XFSCRIPT_SRCS) \
			$(GIELLA_FILTER_CORE_GENERATED_XFSCRIPT_SRCS) \
			$(GIELLA_FILTER_LOCAL_GENERATED_XFSCRIPT_SRCS)


# Variable for all source files - lexc:
LEXC_SRCS = $(GIELLA_FILTER_CORE_LEXC_SRCS) \
		  $(GIELLA_FILTER_LOCAL_LEXC_SRCS) \
		  $(GIELLA_FILTER_CORE_GENERATED_LEXC_SRCS) \
		  $(GIELLA_FILTER_LOCAL_GENERATED_LEXC_SRCS)


# Variable for all generated source files:
GENERATED_FILES = \
		   $(GIELLA_FILTER_CORE_GENERATED_REGEX_SRCS) \
		   $(GIELLA_FILTER_LOCAL_GENERATED_REGEX_SRCS) \
		   $(GIELLA_FILTER_CORE_GENERATED_XFSCRIPT_SRCS) \
		   $(GIELLA_FILTER_LOCAL_GENERATED_XFSCRIPT_SRCS)\
		   $(GIELLA_FILTER_CORE_GENERATED_LEXC_SRCS) \
		   $(GIELLA_FILTER_LOCAL_GENERATED_LEXC_SRCS)


# Define variable before using it:
GIELLA_FILTER_TARGETS = $(am__append_1) $(am__append_2) \
	$(am__append_3)

# need to check way to list build targets like automake
#! @param GIELLA_FILTER_LOCAL_SRCS required, contains all local additions
EXTRA_DIST = $(GIELLA_FILTER_LOCAL_REGEX_SRCS) \
		   $(GIELLA_FILTER_LOCAL_XFSCRIPT_SRCS) \
		   $(GIELLA_FILTER_LOCAL_LEXC_SRCS) \
		   $(EXTRA_SRCS)


####### Automake targets: ########

# @param GIELLA_FILTER_TARGETS required
noinst_DATA = $(GIELLA_FILTER_TARGETS)
BUILT_SOURCES = $(GENERATED_FILES)

####### Build rules for building dialect filters: #######
# DIALECT_TARGETS_?FST is constructed dynamically based on the dialects
# specified in configure.ac.
@HAVE_DIALECTS_TRUE@DIALECT_PREFIXES = $(addprefix remove-all_dialects_but_,$(DIALECTS))
@HAVE_DIALECTS_TRUE@DIALECT_SUFFIXES = $(addsuffix -strings,$(DIALECT_PREFIXES))
@HAVE_DIALECTS_TRUE@DIALECT_REGEXES = $(addsuffix .regex,$(DIALECT_SUFFIXES))

####### Build rules for area / country filters: #######
# AREA_TARGETS_?FST is constructed dynamically based on the ISO 3166
# codes specified in configure.ac.
@HAVE_AREAS_TRUE@AREA_PREFIXES = $(addprefix remove-all_areas_but_,$(AREAS))
@HAVE_AREAS_TRUE@AREA_SUFFIXES = $(addsuffix  -strings,$(AREA_PREFIXES))
@HAVE_AREAS_TRUE@AREA_REGEXES = $(addsuffix     .regex,$(AREA_SUFFIXES))
@HAVE_AREAS_TRUE@AREA_INCONSISTENT_REGEX = remove-mixed_area-strings.regex
@HAVE_AREAS_TRUE@AREA_INSERT_TAGS_REGEX = insert-area-tags-before-pos.regex

######## Build rules for extracting tags: ########

# Variable to hold filename for file containing all tags used
# (all symbols starting or ending with '+')
TAG_FILE = tags.txt

# We need a separate variable for the actual file ref, so that one can use
# pattern matching for tag file & fst in other contexts:
LEX_TAG_FILE = lexicon-$(TAG_FILE)

# Variable to hold filename for fst used as source for extracting tags,
# sans extension
TAG_EXTRACTION_FST = $(top_builddir)/src/fst/morphology/%
TAG_EXTRACTION_TTS_FST = $(top_builddir)/src/fst/morphology/%
@WITH_FOMA_TRUE@HFST_FORMAT = --format=foma
@WITH_OFST_LOG_TRUE@HFST_FORMAT = --format=openfst-log
@WITH_OFST_TROPICAL_TRUE@HFST_FORMAT = --format=openfst-tropical
@WITH_SFST_TRUE@HFST_FORMAT = --format=sfst
@WITH_FOMA_TRUE@HFST_OLFORMAT = --format=optimized-lookup-unweighted
@WITH_OFST_LOG_TRUE@HFST_OLFORMAT = --format=optimized-lookup-weighted
@WITH_OFST_TROPICAL_TRUE@HFST_OLFORMAT = --format=optimized-lookup-weighted
@WITH_SFST_TRUE@HFST_OLFORMAT = --format=optimized-lookup-unweighted

# hfst-compose:
AM_V_COMPOSE = $(AM_V_COMPOSE_@AM_V@)
AM_V_COMPOSE_ = $(AM_V_COMPOSE_@AM_DEFAULT_V@)
AM_V_COMPOSE_0 = @echo "  HCOMPOSE $@";

# hfst-concatenate:
AM_V_HCONCAT = $(AM_V_HCONCAT_@AM_V@)
AM_V_HCONCAT_ = $(AM_V_HCONCAT_@AM_DEFAULT_V@)
AM_V_HCONCAT_0 = @echo "  HCONCAT  $@";

# hfst-conjunct /
# hfst-intersect:
AM_V_CONJCT = $(AM_V_CONJCT_@AM_V@)
AM_V_CONJCT_ = $(AM_V_CONJCT_@AM_DEFAULT_V@)
AM_V_CONJCT_0 = @echo "  HCONJCT  $@";

# hfst-fst2fst:
AM_V_FST2FST = $(AM_V_FST2FST_@AM_V@)
AM_V_FST2FST_ = $(AM_V_FST2FST_@AM_DEFAULT_V@)
AM_V_FST2FST_0 = @echo "  HFST2FST $@";

# hfst-minimize
AM_V_HMINIM = $(AM_V_HMINIM_@AM_V@)
AM_V_HMINIM_ = $(AM_V_HMINIM_@AM_DEFAULT_V@)
AM_V_HMINIM_0 = @echo "  HMINIM   $@";

# hfst-fst2txt:
AM_V_FST2TXT = $(AM_V_FST2TXT_@AM_V@)
AM_V_FST2TXT_ = $(AM_V_FST2TXT_@AM_DEFAULT_V@)
AM_V_FST2TXT_0 = @echo "  HFST2TXT $@";

# hfst-foma:
AM_V_HFOMA = $(AM_V_HFOMA_@AM_V@)
AM_V_HFOMA_ = $(AM_V_HFOMA_@AM_DEFAULT_V@)
AM_V_HFOMA_0 = @echo "  HFOMA    $@";

# hfst-optimized-lookup:
AM_V_HFSTOL = $(AM_V_HFSTOL_@AM_V@)
AM_V_HFSTOL_ = $(AM_V_HFSTOL_@AM_DEFAULT_V@)
AM_V_HFSTOL_0 = @echo "  HFSTOL   $@";

# hfst-lexc:
AM_V_HLEXC = $(AM_V_HLEXC_@AM_V@)
AM_V_HLEXC_ = $(AM_V_HLEXC_@AM_DEFAULT_V@)
AM_V_HLEXC_0 = @echo "  HLEXC    $@";

# hfst-split:
AM_V_HSPLIT = $(AM_V_HSPLIT_@AM_V@)
AM_V_HSPLIT_ = $(AM_V_HSPLIT_@AM_DEFAULT_V@)
AM_V_HSPLIT_0 = @echo "  HSPLIT   $@";

# hfst-substitute:
AM_V_HSUBST = $(AM_V_HSUBST_@AM_V@)
AM_V_HSUBST_ = $(AM_V_HSUBST_@AM_DEFAULT_V@)
AM_V_HSUBST_0 = @echo "  HSUBST   $@";

# hfst-twolc:
AM_V_HTWOLC = $(AM_V_HTWOLC_@AM_V@)
AM_V_HTWOLC_ = $(AM_V_HTWOLC_@AM_DEFAULT_V@)
AM_V_HTWOLC_0 = @echo "  HTWOLC   $@";

# hfst-xfst:
AM_V_HXFST = $(AM_V_HXFST_@AM_V@)
AM_V_HXFST_ = $(AM_V_HXFST_@AM_DEFAULT_V@)
AM_V_HXFST_0 = @echo "  HXFST    $@";

# hfst-compose-intersect:
AM_V_INTRSCT = $(AM_V_INTRSCT_@AM_V@)
AM_V_INTRSCT_ = $(AM_V_INTRSCT_@AM_DEFAULT_V@)
AM_V_INTRSCT_0 = @echo "  HINTRSCT $@";

# hfst-invert:
AM_V_INVERT = $(AM_V_INVERT_@AM_V@)
AM_V_INVERT_ = $(AM_V_INVERT_@AM_DEFAULT_V@)
AM_V_INVERT_0 = @echo "  HINVERT  $@";

# hfst-pmatch2fst
AM_V_PM2FST = $(AM_V_PM2FST_@AM_V@)
AM_V_PM2FST_ = $(AM_V_PM2FST_@AM_DEFAULT_V@)
AM_V_PM2FST_0 = @echo "  HPM2FST  $@";

# hfst-project:
AM_V_PROJECT = $(AM_V_PROJECT_@AM_V@)
AM_V_PROJECT_ = $(AM_V_PROJECT_@AM_DEFAULT_V@)
AM_V_PROJECT_0 = @echo "  HPROJECT $@";

# hfst-prune-alphabet
AM_V_HPRUNE = $(AM_V_HPRUNE_@AM_V@)
AM_V_HPRUNE_ = $(AM_V_HPRUNE_@AM_DEFAULT_V@)
AM_V_HPRUNE_0 = @echo "  HPRUNE   $@";

# hfst-reverse
AM_V_REVERSE = $(AM_V_REVERSE_@AM_V@)
AM_V_REVERSE_ = $(AM_V_REVERSE_@AM_DEFAULT_V@)
AM_V_REVERSE_0 = @echo "  HREVERSE $@";

# hfst-reweight:
AM_V_REWEIGHT = $(AM_V_REWEIGHT_@AM_V@)
AM_V_REWEIGHT_ = $(AM_V_REWEIGHT_@AM_DEFAULT_V@)
AM_V_REWEIGHT_0 = @echo "  HREWGHT  $@";

# hfst-regexp2fst:
AM_V_RGX2FST = $(AM_V_RGX2FST_@AM_V@)
AM_V_RGX2FST_ = $(AM_V_RGX2FST_@AM_DEFAULT_V@)
AM_V_RGX2FST_0 = @echo "  HRGX2FST $@";

# hfst-repeat
AM_V_REPEAT = $(AM_V_REPEAT_@AM_V@)
AM_V_REPEAT_ = $(AM_V_REPEAT_@AM_DEFAULT_V@)
AM_V_REPEAT_0 = @echo "  HREPEAT  $@";

# hfst-strings2fst:
AM_V_STR2FST = $(AM_V_STR2FST_@AM_V@)
AM_V_STR2FST_ = $(AM_V_STR2FST_@AM_DEFAULT_V@)
AM_V_STR2FST_0 = @echo "  HSTR2FST $@";

# hfst-txt2fst:
AM_V_TXT2FST = $(AM_V_TXT2FST_@AM_V@)
AM_V_TXT2FST_ = $(AM_V_TXT2FST_@AM_DEFAULT_V@)
AM_V_TXT2FST_0 = @echo "  HTXT2FST $@";

# hfst-union / hfst-disjunct:
AM_V_UNION = $(AM_V_UNION_@AM_V@)
AM_V_UNION_ = $(AM_V_UNION_@AM_DEFAULT_V@)
AM_V_UNION_0 = @echo "  HUNION   $@";

#### LexD (Apertium)
AM_V_LEXD = $(AM_V_LEXD_@AM_V@)
AM_V_LEXD_ = $(AM_V_LEXD_@AM_DEFAULT_V@)
AM_V_LEXD_0 = @echo "  LEXD     $@";

#### Foma
AM_V_FOMA = $(AM_V_FOMA_@AM_V@)
AM_V_FOMA_ = $(AM_V_FOMA_@AM_DEFAULT_V@)
AM_V_FOMA_0 = @echo "  FOMA     $@";

#### Xerox tools
AM_V_TWOLC = $(AM_V_TWOLC_@AM_V@)
AM_V_TWOLC_ = $(AM_V_TWOLC_@AM_DEFAULT_V@)
AM_V_TWOLC_0 = @echo "  TWOLC    $@";
AM_V_LEXC = $(AM_V_LEXC_@AM_V@)
AM_V_LEXC_ = $(AM_V_LEXC_@AM_DEFAULT_V@)
AM_V_LEXC_0 = @echo "  LEXC     $@";
AM_V_XFST = $(AM_V_XFST_@AM_V@)
AM_V_XFST_ = $(AM_V_XFST_@AM_DEFAULT_V@)
AM_V_XFST_0 = @echo "  XFST     $@";

#### VislCG3
AM_V_CGCOMP = $(AM_V_CGCOMP_@AM_V@)
AM_V_CGCOMP_ = $(AM_V_CGCOMP_@AM_DEFAULT_V@)
AM_V_CGCOMP_0 = @echo "  CG3COMP  $@";

#### Other tools
AM_V_CP = $(AM_V_CP_@AM_V@)
AM_V_CP_ = $(AM_V_CP_@AM_DEFAULT_V@)
AM_V_CP_0 = @echo "  CP       $@";
AM_V_MV = $(AM_V_MV_@AM_V@)
AM_V_MV_ = $(AM_V_MV_@AM_DEFAULT_V@)
AM_V_MV_0 = @echo "  MV       $@";
AM_V_GZIP = $(AM_V_GZIP_@AM_V@)
AM_V_GZIP_ = $(AM_V_GZIP_@AM_DEFAULT_V@)
AM_V_GZIP_0 = @echo "  GZIP     $@";
AM_V_ZIP = $(AM_V_ZIP_@AM_V@)
AM_V_ZIP_ = $(AM_V_ZIP_@AM_DEFAULT_V@)
AM_V_ZIP_0 = @echo "  ZIP      $@";
AM_V_SAXON = $(AM_V_SAXON_@AM_V@)
AM_V_SAXON_ = $(AM_V_SAXON_@AM_DEFAULT_V@)
AM_V_SAXON_0 = @echo "  SAXON    $@";
AM_V_XSLPROC = $(AM_V_XSLPROC_@AM_V@)
AM_V_XSLPROC_ = $(AM_V_XSLPROC_@AM_DEFAULT_V@)
AM_V_XSLPROC_0 = @echo "  XSLPROC  $@";
AM_V_AWK = $(AM_V_AWK_@AM_V@)
AM_V_AWK_ = $(AM_V_AWK_@AM_DEFAULT_V@)
AM_V_AWK_0 = @echo "  AWK      $@";
AM_V_SED = $(AM_V_SED_@AM_V@)
AM_V_SED_ = $(AM_V_SED_@AM_DEFAULT_V@)
AM_V_SED_0 = @echo "  SED      $@";
AM_V_FORREST = $(AM_V_FORREST_@AM_V@)
AM_V_FORREST_ = $(AM_V_FORREST_@AM_DEFAULT_V@)
AM_V_FORREST_0 = @echo "  FORREST  $@";

# Let the verbosity of some command line tools follow the automake verbosity.
# VERBOSITY       = be quiet if V=0, unspecified otherwise
# MORE_VERBOSITY  = be quiet if V=0, be verbose otherwise
VERBOSITY = $(if $(strip $(filter-out false,$(AM_V_P))), ,-q)
MORE_VERBOSITY = $(if $(strip $(filter-out false,$(AM_V_P))),-v,-q)

# The OR construction needs to be put into a variable for the parentheses to
# survive 'make' and be visible to the shell - this at the same time silences
# grep.
GREP_TAGS_COMMAND = ( grep -E '(^\+.|.\+$$)' || echo '+NoTagsFound' )

# An alternative grep to extract all flags in an fst:
GREP_FLAGS_COMMAND = ( grep -E '(^@.+@$$)' || echo '@C.NOFLAG@' )

# either depend on $(GENDIR) or $(MAKE) $(GENDIR) when using temporary files in
# gendir.
GENDIR = .generated/.stamp
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .foma .hfst .regex .xfst
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/../giella-core/am-shared/src-filters-dir-include.am $(top_srcdir)/../giella-core/am-shared/lexc-include.am $(top_srcdir)/../giella-core/am-shared/regex-include.am $(top_srcdir)/../giella-core/am-shared/xfscript-include.am $(top_srcdir)/../giella-core/am-shared/hfst-format-include.am $(top_srcdir)/../giella-core/am-shared/silent_build-include.am $(top_srcdir)/../giella-core/am-shared/tag-extraction-include.am $(top_srcdir)/../giella-core/am-shared/dot-generated-dir.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/fst/filters/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/fst/filters/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/../giella-core/am-shared/src-filters-dir-include.am $(top_srcdir)/../giella-core/am-shared/lexc-include.am $(top_srcdir)/../giella-core/am-shared/regex-include.am $(top_srcdir)/../giella-core/am-shared/xfscript-include.am $(top_srcdir)/../giella-core/am-shared/hfst-format-include.am $(top_srcdir)/../giella-core/am-shared/silent_build-include.am $(top_srcdir)/../giella-core/am-shared/tag-extraction-include.am $(top_srcdir)/../giella-core/am-shared/dot-generated-dir.am $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
tags TAGS:

ctags CTAGS:

cscope cscopelist:

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(DATA)
installdirs:
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: all check install install-am install-exec install-strip

.PHONY: all all-am check check-am clean clean-generic clean-local \
	cscopelist-am ctags-am distclean distclean-generic distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic pdf \
	pdf-am ps ps-am tags-am uninstall uninstall-am

.PRECIOUS: Makefile


####### Automake targets: ########
# Make sure that targets are deleted when something breaks:
.DELETE_ON_ERROR:

# Extract tags with specific prefixes, for automatic generation of regexes.
# Only save the new tag list if there are real differences, otherwise just skip.
# This will ensure that the regex is only regenerated when there are real
# changes in the tag list, and thus stop unnecessary recompilation of fst's.
# Also first checks whether the target tag list file exists - if you try to diff
# against a non-existing file diff will error out and stop the build.
area-tags.txt: $(LEX_TAG_FILE)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@.tmp Area/
	$(AM_V_GEN)if test -f $@ ; then \
		if ! diff -q $@ $@.tmp ; then \
			mv -f $@.tmp $@ ; \
		else \
			rm -f $@.tmp ; \
		fi ;\
	else \
		mv -f $@.tmp $@ ; \
	fi

derivation-tags.txt: $(LEX_TAG_FILE)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@.tmp Der/
	$(AM_V_GEN)if test -f $@ ; then \
		if ! diff -q $@ $@.tmp ; then \
			mv -f $@.tmp $@ ; \
		else \
			rm -f $@.tmp ; \
		fi ;\
	else \
		mv -f $@.tmp $@ ; \
	fi

dialect-tags.txt: $(LEX_TAG_FILE)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@.tmp Dial/
	$(AM_V_GEN)if test -f $@ ; then \
		if ! diff -q $@ $@.tmp ; then \
			mv -f $@.tmp $@ ; \
		else \
			rm -f $@.tmp ; \
		fi ;\
	else \
		mv -f $@.tmp $@ ; \
	fi

grammatical-tags.txt: $(LEX_TAG_FILE)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@.tmp Gram/
	$(AM_V_GEN)if test -f $@ ; then \
		if ! diff -q $@ $@.tmp ; then \
			mv -f $@.tmp $@ ; \
		else \
			rm -f $@.tmp ; \
		fi ;\
	else \
		mv -f $@.tmp $@ ; \
	fi

error-tags.txt: $(LEX_TAG_FILE)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@.tmp Err/
	$(AM_V_GEN)if test -f $@ ; then \
		if ! diff -q $@ $@.tmp ; then \
			mv -f $@.tmp $@ ; \
		else \
			rm -f $@.tmp ; \
		fi ;\
	else \
		mv -f $@.tmp $@ ; \
	fi

orig_lang-tags.txt: $(LEX_TAG_FILE)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@.tmp OLang/
	$(AM_V_GEN)if test -f $@ ; then \
		if ! diff -q $@ $@.tmp ; then \
			mv -f $@.tmp $@ ; \
		else \
			rm -f $@.tmp ; \
		fi ;\
	else \
		mv -f $@.tmp $@ ; \
	fi

semantic-tags.txt: $(LEX_TAG_FILE)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@.tmp Sem/
	$(AM_V_GEN)if test -f $@ ; then \
		if ! diff -q $@ $@.tmp ; then \
			mv -f $@.tmp $@ ; \
		else \
			rm -f $@.tmp ; \
		fi ;\
	else \
		mv -f $@.tmp $@ ; \
	fi

usage-tags.txt: $(LEX_TAG_FILE)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@.tmp Use/
	$(AM_V_GEN)if test -f $@ ; then \
		if ! diff -q $@ $@.tmp ; then \
			mv -f $@.tmp $@ ; \
		else \
			rm -f $@.tmp ; \
		fi ;\
	else \
		mv -f $@.tmp $@ ; \
	fi

####### Build rules for creating regexes from tag list: #######

# Create regex from tag list for making that tag list optional.
# The conditional is there to allow for tag list specific shell scripts, ie only
# optional in certain contexts. If not found, it will fall back to a default
# shell script.
make-optional-%-tags.regex: %-tags.txt
	$(AM_V_GEN)if \
		test -e $(GTCORE)/scripts/taglist2make_optional_$*_tags_regex.sh ; \
		then \
			$(GTCORE)/scripts/taglist2make_optional_$*_tags_regex.sh $< > $@ ; \
		else \
			$(GTCORE)/scripts/taglist2make_optional_tags_regex.sh $< > $@ ; \
		fi

# Create regex from tag list for removing the tags in the tag list from the fst.
# The conditional is there to allow for tag list specific shell scripts, ie only
# remove in certain contexts. If not found, it will fall back to a default
# shell script.
remove-%-tags.regex: %-tags.txt
	$(AM_V_GEN)if test -e $(GTCORE)/scripts/taglist2remove_$*_tags_regex.sh ; \
		then \
			$(GTCORE)/scripts/taglist2remove_$*_tags_regex.sh $< > $@ ; \
		else \
			$(GTCORE)/scripts/taglist2remove_tags_regex.sh $< > $@ ; \
		fi

remove-%-tags-before-pos.regex: %-tags.txt
	$(AM_V_GEN)$(GTCORE)/scripts/taglist2remove_$*_tags_before_pos_regex.sh \
		$< > $@

remove-%-tags-before-derivations.regex: %-tags.txt
	$(AM_V_GEN)$(GTCORE)/scripts/taglist2remove_$*_tags_before_derivations_regex.sh \
		$< > $@

# Remove strings specific to other dialects than the requested one:
remove-all_dialects_but_%-strings.regex:
	$(MAKE) $(GENDIR)  # huh?
	$(AM_V_GEN)$(GTCORE)/scripts/generate-dialect-filter-regex.sh \
		$@ `echo $* | sed -e 's:.generated/::'` "$(DIALECTS)"

# Remove strings specific to other areas than the requested one:
remove-all_areas_but_%-strings.regex:
	$(AM_V_GEN)$(GTCORE)/scripts/generate-area-filter-regex.sh \
		$@ $* "$(AREAS)"

# Remove strings with mixed area orthografies:
remove-mixed_area-strings.regex:
	$(AM_V_GEN)$(GTCORE)/scripts/generate-mixed_area-filter-regex.sh \
		$@ "$(AREAS)"

### Remove strings with tags as specified:
# Specific variant - take into account an exception file:
remove-%-strings.regex: %-tags.txt \
						remove-%-strings-modifications.regex
	$(AM_V_GEN)if test -e $(GTCORE)/scripts/taglist2remove_$*_strings_regex.sh;\
		then \
			$(GTCORE)/scripts/taglist2remove_$*_strings_regex.sh $@ $* $^ ; \
		else \
			$(GTCORE)/scripts/taglist2remove_strings_regex.sh $@ $* $^ ; \
		fi

# General variant - remove all strings without exception:
remove-%-strings.regex: %-tags.txt
	$(AM_V_GEN)if test -e $(GTCORE)/scripts/taglist2remove_$*_strings_regex.sh;\
		then \
			$(GTCORE)/scripts/taglist2remove_$*_strings_regex.sh $@ $* $^ ; \
		else \
			$(GTCORE)/scripts/taglist2remove_strings_regex.sh $@ $* $^ ; \
		fi

### Reorder tags:
reorder-%-tags.regex: %-tags.txt
	$(AM_V_GEN)$(GTCORE)/scripts/taglist2reorder_$*_tags_regex.sh \
		$@ $^

### Insert tags after POS:
insert-%-tags-after-pos.regex: %-tags.txt
	$(AM_V_GEN)$(GTCORE)/scripts/taglist2insert_$*_tags_after_pos_regex.sh \
		$@ $^

### Insert tags before POS:
insert-%-tags-before-pos.regex: %-tags.txt \
        $(GTCORE)/scripts/taglist2insert_%_tags_before_pos_regex.sh
	$(AM_V_GEN)$(GTCORE)/scripts/taglist2insert_$*_tags_before_pos_regex.sh \
		$@ $<

# Workaround hack for bug in the Sfst and Foma backends due to the size of this
# filter for some languages:
reorder-semantic-tags.hfst: reorder-semantic-tags.regex
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) $(HFST_FLAGS) --format=openfst-tropical \
		$(HFST_REGEXP2FST_FLAGS) $(MORE_VERBOSITY) -S $< \
		| $(HFST_FST2FST) $(MORE_VERBOSITY) $(HFST_FORMAT) \
		-o $@

####### Copy regex files from giella-core if not found locally: ########
%.regex: $(GIELLA_CORE)/fst-filters/%.regex
	$(AM_V_CP)cp -f $< $@

####### HFST build rules: ########
.generated/%.hfst: %.lexc $(GENDIR)
	$(AM_V_HLEXC)"$(HFST_LEXC)" \
		$(MORE_VERBOSITY) $(HFST_FORMAT) $(HFST_LEXC_FLAGS) -o $@ $<

.generated/%.hfst: .generated/%.tmp.lexc $(GENDIR)
	$(AM_V_HLEXC)"$(HFST_LEXC)" \
		$(MORE_VERBOSITY) $(HFST_FORMAT) $(HFST_LEXC_FLAGS) -o $@ $<

####### Xerox build rules: #######
.generated/%.xfst: %.lexc $(GENDIR)
	$(AM_V_XFST)"$(XFST)" $(VERBOSITY) \
			-e "read lexc $<" \
			-e "save stack $@ " \
			-stop

.generated/%.xfst: .generated/%.tmp.lexc $(GENDIR)
	$(AM_V_XFST)"$(XFST)" $(VERBOSITY) \
			-e "read lexc $<" \
			-e "save stack $@ " \
			-stop

####### Foma build rules: #######
.generated/%.foma: %.lexc $(GENDIR)
	$(AM_V_FOMA)"$(FOMA)" $(VERBOSITY) \
			-e "set lexc-align ON" \
			-e "read lexc $<" \
			-e "save stack $@ " \
			-s

.generated/%.foma: .generated/%.tmp.lexc $(GENDIR)
	$(AM_V_FOMA)"$(FOMA)" $(VERBOSITY) \
			-e "set lexc-align ON" \
			-e "read lexc $<" \
			-e "save stack $@ " \
			-s

# vim: set ft=automake:

# We need a special target for regexes that must be compiled in the selected fst
# format while in the same dir as regexes that should be compiled using the
# openfst format. These are typically for spellers and other weighted utilities:
$(SELECTED_FORMAT_REGEX_TARGETS): \
%.hfst: %.regex
	$(AM_V_RGX2FST)"$(HFST_REGEXP2FST)" $(HFST_FLAGS) $(HFST_FORMAT) \
		$(HFST_REGEXP2FST_FLAGS) $(MORE_VERBOSITY) -S $< -o $@

# We need a special target for regexes that must be compiled in the openfst
# format while in the same dir as regexes that can be compiled using the chosen
# format. These are typically for spellers and other weighted utilities:
$(OFST_REGEX_TARGETS): \
%.hfst: %.regex
	$(AM_V_RGX2FST)"$(HFST_REGEXP2FST)" $(HFST_FLAGS) \
	   --format=openfst-tropical \
		$(HFST_REGEXP2FST_FLAGS) $(MORE_VERBOSITY) -S -i $< -o $@

# By default, and for Xerox compatibility, all regexes are semicolon separated
# (that is the '-S' flag):
.regex.hfst:
	$(AM_V_RGX2FST)"$(HFST_REGEXP2FST)" $(HFST_FLAGS) $(HFST_FORMAT) \
		$(HFST_REGEXP2FST_FLAGS) $(MORE_VERBOSITY) -S $< -o $@

####### Xerox build rules: #######

# xfst needs a script to read regex file
.regex.xfst:
	$(AM_V_XFST)$(PRINTF) "read regex @re\"$<\";\nsave stack $@\nquit\n" \
		| "$(XFST)" $(XFSTFLAGS) $(VERBOSITY)

####### Foma build rules: #######

# foma needs a script to read regex file
.regex.foma:
	$(AM_V_FOMA)$(PRINTF) "read regex @re\"$<\";\nsave stack $@\nquit\n" \
		| "$(FOMA)" $(FOMAFLAGS) $(VERBOSITY)

# vim: set ft=automake:

####### HFST build rules: ########
.generated/%.hfst: %.xfscript $(GENDIR)
	$(AM_V_HXFST)printf "\n\nsave stack $@\nquit\n" | cat $< - \
		| "$(HFST_XFST)" -p $(MORE_VERBOSITY) $(HFST_FORMAT)

####### Xerox build rules: #######
.generated/%.xfst: %.xfscript $(GENDIR)
	$(AM_V_XFST)"$(XFST)" $(VERBOSITY) -l $< -e "save stack $@" -stop

####### Foma build rules: #######
.generated/%.foma: %.xfscript $(GENDIR)
	$(AM_V_FOMA)"$(FOMA)" $(VERBOSITY) -l $< -e "save stack $@" -s

# Pattern variables to choose tools depending on which toolset we build for:
%.hfst : XFST_TOOL      = $(HFST_XFST) -p $(MORE_VERBOSITY) $(HFST_FORMAT)
%.xfst : XFST_TOOL      = $(XFST) $(VERBOSITY)
%.foma : XFST_TOOL      = $(FOMA) $(VERBOSITY)
# following is just more verbose error message when some rule tries to invoke
# xfst-tool for %.hfstol pattern which won't work, solve it by static pattern
# that bloxks the hfstol like:
# foobar.hfst \
# foobar.xfst \
# foobar.foma: \
# foobar.%: foobar.tmp.%
%.hfstol : XFST_TOOL    = false THIS IS A BUG IN MAKEFILE see xfscript-include.am

%.hfst : AM_V_XFST_TOOL = $(AM_V_HXFST)
%.xfst : AM_V_XFST_TOOL = $(AM_V_XFST)
%.foma : AM_V_XFST_TOOL = $(AM_V_FOMA)

%.hfst : INVERT_HFST = invert net\n
%.xfst : INVERT_XFST = invert net\n
%.foma : INVERT_FOMA = invert net\n

# vim: set ft=automake:

# Extract the sigma set using either HFST or Xfst depending on the configuration
# The sigma extraction is tuned to the peculiarities of both, and does produce
# the exact same output. The sigma set can be used to extract further symbol
# sets. The file sigma.txt contains one symbol pr line, and the whole line
# is the symbol (minus final newline).

# Hfst: break on comma + space in three steps, to preserve space as a symbol.

# Special case for TTS, because the FST has a different name. TTS only
# works with HFST, so we skip the other technologies.
@CAN_HFST_TRUE@%-sigma.txt: $(TAG_EXTRACTION_TTS_FST).hfst
@CAN_HFST_TRUE@	$(AM_V_GEN)$(HFST_SUMMARIZE) -v 2>/dev/null $^ \
@CAN_HFST_TRUE@		| grep -A1 '^sigma set' \
@CAN_HFST_TRUE@		| grep -v '^sigma set' \
@CAN_HFST_TRUE@		| sed 's/, /\\\\\\/g' \
@CAN_HFST_TRUE@		| perl -pe 's/\\\\\\/\n/g' \
@CAN_HFST_TRUE@		| grep -v '^$$' \
@CAN_HFST_TRUE@		| egrep -v '(@_EPSILON_SYMBOL_@|@_IDENTITY_SYMBOL_@|@_UNKNOWN_SYMBOL_@)' \
@CAN_HFST_TRUE@		> $@

@CAN_HFST_TRUE@%-sigma.txt: $(TAG_EXTRACTION_FST).hfst
@CAN_HFST_TRUE@	$(AM_V_GEN)$(HFST_SUMMARIZE) -v 2>/dev/null $^ \
@CAN_HFST_TRUE@		| grep -A1 '^sigma set' \
@CAN_HFST_TRUE@		| grep -v '^sigma set' \
@CAN_HFST_TRUE@		| sed 's/, /\\\\\\/g' \
@CAN_HFST_TRUE@		| perl -pe 's/\\\\\\/\n/g' \
@CAN_HFST_TRUE@		| grep -v '^$$' \
@CAN_HFST_TRUE@		| egrep -v '(@_EPSILON_SYMBOL_@|@_IDENTITY_SYMBOL_@|@_UNKNOWN_SYMBOL_@)' \
@CAN_HFST_TRUE@		> $@

# Special treatment of space (" "), break on space, special treatment of
# reserved symbols ("X") and double quote. The Xfst file needs to be sorted.
@CAN_HFST_FALSE@@CAN_XFST_TRUE@%-sigma.txt: $(TAG_EXTRACTION_FST).xfst
@CAN_HFST_FALSE@@CAN_XFST_TRUE@	$(AM_V_GEN)$(XFST) -q \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@			-e "load stack $^" \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@			-e "print sigma" \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@			-stop \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| grep -v '^Size' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/^Sigma: //' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/       //' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/" "/XXXXX/g' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| tr ' ' '\n' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/XXXXX/ /g' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| grep -v '^$$' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/^"\(.\)"$$/\1/' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/%\"/"/' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| LCALL=C sort \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		> $@

# If neither Hfst nor Xfst is enabled, create an empty file:
@CAN_HFST_FALSE@@CAN_XFST_FALSE@%-sigma.txt:
@CAN_HFST_FALSE@@CAN_XFST_FALSE@	$(AM_V_GEN)touch $@

# Alt-orth variant of the above
define alt_orth_token_tags
# Hfst: break on comma + space in three steps, to preserve space as a symbol.
@CAN_HFST_TRUE@%-$(1)-sigma.txt: $$(TAG_EXTRACTION_FST).$(1).hfstol
@CAN_HFST_TRUE@	$$(AM_V_GEN)$$(HFST_SUMMARIZE) -v 2>/dev/null $$< \
@CAN_HFST_TRUE@		| grep -A1 '^sigma set' \
@CAN_HFST_TRUE@		| grep -v '^sigma set' \
@CAN_HFST_TRUE@		| sed 's/, /\\\\\\/g' \
@CAN_HFST_TRUE@		| perl -pe 's/\\\\\\/\n/g' \
@CAN_HFST_TRUE@		| grep -v '^$$$$' \
@CAN_HFST_TRUE@		| egrep -v '(@_EPSILON_SYMBOL_@|@_IDENTITY_SYMBOL_@|@_UNKNOWN_SYMBOL_@)' \
@CAN_HFST_TRUE@		> $$@

# Special treatment of space (" "), break on space, special treatment of
# reserved symbols ("X") and double quote. The Xfst file needs to be sorted.
@CAN_HFST_FALSE@@CAN_XFST_TRUE@%-$(1)-sigma.txt: $$(TAG_EXTRACTION_FST).$(1).xfst
@CAN_HFST_FALSE@@CAN_XFST_TRUE@	$$(AM_V_GEN)$$(XFST) -q \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@			-e "load stack $$<" \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@			-e "print sigma" \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@			-stop \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| grep -v '^Size' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/^Sigma: //' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/       //' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/" "/XXXXX/g' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| tr ' ' '\n' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/XXXXX/ /g' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| grep -v '^$$$$' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/^"\(.\)"$$$$/\1/' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| sed 's/%\"/"/' \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		| LCALL=C sort \
@CAN_HFST_FALSE@@CAN_XFST_TRUE@		> $$@

# If neither Hfst nor Xfst is enabled, create an empty file:
@CAN_HFST_FALSE@@CAN_XFST_FALSE@%-$(1)-sigma.txt:
@CAN_HFST_FALSE@@CAN_XFST_FALSE@	$(AM_V_GEN)touch $@

endef
$(foreach alt_orth,$(ALT_ORTHS),$(eval $(call alt_orth_token_tags,$(alt_orth))))

%-$(TAG_FILE): %-sigma.txt
	$(AM_V_GEN)$(GREP_TAGS_COMMAND) < $< > $@	

%-$(FLAG_FILE): %-sigma.txt
	$(AM_V_GEN)$(GREP_FLAGS_COMMAND) < $< > $@	

$(GENDIR):
	$(AM_V_at)$(MKDIR_P) `dirname $@`
	$(AM_V_GEN)touch $@

# XXX while split between temporary and final targets isn't cleaned up
%.hfst: .generated/%.hfst
	$(AM_V_CP)cp $< $@

%.xfst: .generated/%.xfst
	$(AM_V_CP)cp $< $@

%.foma: .generated/%.foma
	$(AM_V_CP)cp $< $@

# maybe...
clean-local: clean-local-gendir
.PHONY: clean-local-gendir
clean-local-gendir:
	@rm -rf .generated

# vim: set ft=automake:

####### Other targets: ###########

# Include files for the actual build instructions and for verbosity control:

# vim: set ft=automake:

########## Add local build rules below here: ############

############### END: Local modifications ################
#########################################################

# Included build file, where the actual build instructions are:

# vim: set ft=automake:

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
