# Makefile.in generated by automake 1.16.5 from Makefile.am.
# tools/spellcheckers/neural/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/giella-slh
pkgincludedir = $(includedir)/giella-slh
pkglibdir = $(libdir)/giella-slh
pkglibexecdir = $(libexecdir)/giella-slh
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = aarch64-apple-darwin23.4.0
host_triplet = aarch64-apple-darwin23.4.0
subdir = tools/spellcheckers/neural
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_check_gnu_make.m4 \
	$(top_srcdir)/m4/ax_compare_version.m4 \
	$(top_srcdir)/m4/ax_python_module.m4 \
	$(top_srcdir)/m4/giella-config-files.m4 \
	$(top_srcdir)/m4/giella-macros.m4 $(top_srcdir)/m4/hfst.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
DATA = $(noinst_DATA)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
am__DIST_COMMON = $(srcdir)/Makefile.in
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} '/Users/jackrueter/Dropbox/Github/giellalt/lang-slh/build-aux/missing' aclocal-1.16
ALT_ORTHS = 
ALT_WSS = 
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AREAS = 
AUTOCONF = ${SHELL} '/Users/jackrueter/Dropbox/Github/giellalt/lang-slh/build-aux/missing' autoconf
AUTOHEADER = ${SHELL} '/Users/jackrueter/Dropbox/Github/giellalt/lang-slh/build-aux/missing' autoheader
AUTOMAKE = ${SHELL} '/Users/jackrueter/Dropbox/Github/giellalt/lang-slh/build-aux/missing' automake-1.16
AWK = gawk
BC = /usr/bin/bc
CG3_CFLAGS = -I/usr/local/include/
CG3_LIBS = -L/usr/local/lib -lcg3
CGFLOOKUP = /usr/local/bin/cgflookup
CG_MWESPLIT = /usr/local/bin/cg-mwesplit
CG_RELABEL = /usr/local/bin/cg-relabel
CSCOPE = cscope
CTAGS = ctags
CYGPATH_W = echo
CYGWINJAVAPATH = echo
DEFAULT_ANALYSERS = yes
DEFAULT_CUSTOM_FSTS = yes
DEFAULT_FOMA = no
DEFAULT_GENERATORS = yes
DEFAULT_HFST = yes
DEFAULT_HFST_BACKEND = foma
DEFAULT_HYPERMIN = no
DEFAULT_ORTH = 
DEFAULT_REVERCI = yes
DEFAULT_SPELLER_MINIMISATION = no
DEFAULT_WS = Latn
DEFAULT_XFST = no
DEFS = -DPACKAGE_NAME=\"Giella\ slh\" -DPACKAGE_TARNAME=\"giella-slh\" -DPACKAGE_VERSION=\"0.1.0\" -DPACKAGE_STRING=\"Giella\ slh\ 0.1.0\" -DPACKAGE_BUGREPORT=\"feedback@divvun.no\" -DPACKAGE_URL=\"http://divvun.no\" -DPACKAGE=\"giella-slh\" -DVERSION=\"0.1.0\"
DIALECTS = 
DIFFTOOL = /usr/bin/opendiff
DIVVUN_ACCURACY = 
DIVVUN_CHECKER = /usr/local/bin/divvun-checker
DIVVUN_VALIDATE_SUGGEST = /usr/local/bin/divvun-validate-suggest
ECHO_C = \c
ECHO_N = 
ECHO_T = 
ETAGS = etags
FLOOKUP = /usr/local/bin/flookup
FOMA = /usr/local/bin/foma
FORREST = 
GAWK = /opt/homebrew/bin/gawk
GIELLA_CORE = /Users/jackrueter/Dropbox/Github/giellalt/lang-slh/./../giella-core
GIELLA_CORE_VERSION = /Users/jackrueter/Dropbox/Github/giellalt/lang-slh/./../giella-core/scripts/gt-version.sh
GLANG = slh
GLANG2 = slh
GLANGUAGE = Southern Puget Sound Salish
GRAMCHECKVERSION = 0.1.0
GTCORE = /Users/jackrueter/Dropbox/Github/giellalt/lang-slh/./../giella-core
GTCORESH = /Users/jackrueter/Dropbox/Github/giellalt/giella-core/scripts/gt-core.sh
GTLANG = slh
GTLANG2 = slh
GTLANGUAGE = Southern Puget Sound Salish
GZIP = /usr/bin/gzip
HFST_COMPOSE = /usr/local/bin/hfst-compose
HFST_COMPOSE_INTERSECT = /usr/local/bin/hfst-compose-intersect
HFST_CONCATENATE = /usr/local/bin/hfst-concatenate
HFST_CONJUNCT = /usr/local/bin/hfst-conjunct
HFST_DETERMINIZE = /usr/local/bin/hfst-determinize
HFST_DISJUNCT = /usr/local/bin/hfst-disjunct
HFST_FOMA = false
HFST_FORMAT_NAME = foma
HFST_FST2FST = /usr/local/bin/hfst-fst2fst
HFST_FST2STRINGS = /usr/local/bin/hfst-fst2strings
HFST_FST2TXT = /usr/local/bin/hfst-fst2txt
HFST_INFO = /usr/local/bin/hfst-info
HFST_INTERSECT = /usr/local/bin/hfst-intersect
HFST_INVERT = /usr/local/bin/hfst-invert
HFST_LEXC = /usr/local/bin/hfst-lexc
HFST_LOOKUP = /usr/local/bin/hfst-lookup
HFST_MINIMIZE = /usr/local/bin/hfst-minimize
HFST_MINIMIZE_SPELLER = /usr/local/bin/hfst-remove-epsilons $(HFST_FLAGS) $(MORE_VERBOSITY) 
HFST_MINUS = /usr/local/bin/hfst-minus
HFST_MULTIPLY = /usr/local/bin/hfst-multiply
HFST_NAME = /usr/local/bin/hfst-name
HFST_OPTIMIZED_LOOKUP = /usr/local/bin/hfst-optimized-lookup
HFST_OSPELL = /usr/local/bin/hfst-ospell
HFST_PAIR_TEST = /usr/local/bin/hfst-pair-test
HFST_PMATCH2FST = /usr/local/bin/hfst-pmatch2fst
HFST_PROC = /usr/local/bin/hfst-proc
HFST_PROJECT = /usr/local/bin/hfst-project
HFST_PRUNE_ALPHABET = /usr/local/bin/hfst-prune-alphabet
HFST_PUSH_WEIGHTS = /usr/local/bin/hfst-push-weights
HFST_REGEXP2FST = /usr/local/bin/hfst-regexp2fst
HFST_REMOVE_EPSILONS = /usr/local/bin/hfst-remove-epsilons
HFST_REPEAT = /usr/local/bin/hfst-repeat
HFST_REVERSE = /usr/local/bin/hfst-reverse
HFST_REWEIGHT = /usr/local/bin/hfst-reweight
HFST_SPLIT = /usr/local/bin/hfst-split
HFST_STRINGS2FST = /usr/local/bin/hfst-strings2fst
HFST_SUBSTITUTE = /usr/local/bin/hfst-substitute
HFST_SUBTRACT = /usr/local/bin/hfst-subtract
HFST_SUMMARIZE = /usr/local/bin/hfst-summarize
HFST_TOKENISE = /usr/local/bin/hfst-tokenize
HFST_TWOLC = /usr/local/bin/hfst-twolc
HFST_TXT2FST = /usr/local/bin/hfst-txt2fst
HFST_XFST = /usr/local/bin/hfst-xfst
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
JV = /usr/bin/java
LEXC = false
LEXREF_IN_XFSCRIPT = 
LIBOBJS = 
LIBS = 
LOOKUP = false
LTLIBOBJS = 
MAKEINFO = ${SHELL} '/Users/jackrueter/Dropbox/Github/giellalt/lang-slh/build-aux/missing' makeinfo
MKDIR_P = mkdir -p
NO_PHONOLOGY = 
NPM = 
ONMT_BUILD_VOCAB = 
ONMT_TRAIN = 
PACKAGE = giella-slh
PACKAGE_BUGREPORT = feedback@divvun.no
PACKAGE_NAME = Giella slh
PACKAGE_STRING = Giella slh 0.1.0
PACKAGE_TARNAME = giella-slh
PACKAGE_URL = http://divvun.no
PACKAGE_VERSION = 0.1.0
PATGEN = false
PATH_SEPARATOR = :
PERL = /opt/homebrew/bin/perl
PKG_CONFIG = /opt/homebrew/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = /usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/opt/homebrew/opt/libxml2/lib/pkgconfig:/opt/homebrew/opt/icu4c/lib/pkgconfig:
PRINTF = /usr/bin/printf
PYTHON = /Library/Frameworks/Python.framework/Versions/3.8/bin/python3
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_PLATFORM = darwin
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 3.8
R = 
RSYNC = /usr/bin/rsync
SAXON = false
SAXONJAR = /Users/jackrueter/lib/saxon9he.jar
SED = /usr/bin/sed
SEE = 
SET_MAKE = 
SHELL = /bin/sh
SPELLERVERSION = 0.1.0
SPELLER_DESC_ENG = A spellchecker for Southern Puget Sound Salish, made by members of the language community, and by the Divvun and Giellatekno groups at UiT The Arctic University of Norway
SPELLER_DESC_NATIVE = TRANSLATE: A spellchecker for Southern Puget Sound Salish, made by members of the language community, and by the Divvun and Giellatekno groups at UiT The Arctic University of Norway
SPELLER_NAME_ENG = Southern Puget Sound Salish spellchecker
SPELLER_NAME_NATIVE = Autonym spellchecker
STRIP = 
TAR = /usr/bin/tar
TWOLC = false
UCONV = /opt/homebrew/opt/icu4c/bin/uconv
VERSION = 0.1.0
VISLCG3 = /usr/local/bin/vislcg3
VISLCG3_COMP = /usr/local/bin/cg-comp
VOIKKOGC = false
VOIKKOHYPHENATE = false
VOIKKOSPELL = false
VOIKKOVFSTC = false
WGET = /opt/homebrew/bin/wget
XFST = false
XZ = /opt/homebrew/bin/xz
ZIP = /usr/bin/zip
abs_builddir = /Users/jackrueter/Dropbox/Github/giellalt/lang-slh/tools/spellcheckers/neural
abs_srcdir = /Users/jackrueter/Dropbox/Github/giellalt/lang-slh/tools/spellcheckers/neural
abs_top_builddir = /Users/jackrueter/Dropbox/Github/giellalt/lang-slh
abs_top_srcdir = /Users/jackrueter/Dropbox/Github/giellalt/lang-slh
am__leading_dot = .
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build = aarch64-apple-darwin23.4.0
build_alias = 
build_cpu = aarch64
build_os = darwin23.4.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
gt_SHARED_common = /Users/jackrueter/Dropbox/Github/giellalt/lang-slh/./../shared-mul
host = aarch64-apple-darwin23.4.0
host_alias = 
host_cpu = aarch64
host_os = darwin23.4.0
host_vendor = apple
htmldir = ${docdir}
ifGNUmake = 
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/jackrueter/Dropbox/Github/giellalt/lang-slh/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/giella-slh
pkgpythondir = ${pythondir}/giella-slh
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${PYTHON_EXEC_PREFIX}/lib/python3.8/site-packages
pythondir = ${PYTHON_PREFIX}/lib/python3.8/site-packages
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../../
top_builddir = ../../..
top_srcdir = ../../..
#GT_NEURAL_MODELS = speller.charbased.model
#noinst_DATA = $(GT_NEURAL_MODELS)
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign tools/spellcheckers/neural/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign tools/spellcheckers/neural/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
tags TAGS:

ctags CTAGS:

cscope cscopelist:

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(DATA)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic cscopelist-am \
	ctags-am distclean distclean-generic distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic pdf \
	pdf-am ps ps-am tags-am uninstall uninstall-am

.PRECIOUS: Makefile


typos.txt: $(top_srcdir)/test/data/typos.txt
	cp -v $< $@

typos.unsorted: typos.txt
	grep -v -E '^#' < $< | grep -v -E '^$$' | sort -R | cut -f 1,2 -d '	' > $@

# TODO:
# TRAIN VALID TEST split is now 90 % 5 % 5 %, if corpora too big update to:
# everything minus some thousands, some thousands halved -split!
# also, collect correct words in this corpus...
train.typos: typos.unsorted
	head -n `wc -l < $< | $(SED) -e 's:$$: * 0.9 / 1:' | bc` < $< > $@

validate.typos: typos.unsorted
	tail -n `wc -l < $< | $(SED) -e 's:$$: * 0.1 / 1:' | bc` < $< |\
		head -n `wc -l < $< | $(SED) -e 's:$$: * 0.05 / 1:' | bc` > $@

test.typos: typos.unsorted
	tail -n `wc -l < $< | $(SED) -e 's:$$: * 0.1 / 1:' | bc` < $< |\
		tail -n `wc -l < $< | $(SED) -e 's:$$: * 0.05 / 1:' | bc` > $@

%.correct: %.typos
	cut -d '	' -f 1 < $< > $@

%.incorrect: %.typos
	cut -d '	' -f 2 < $< > $@

%.chars: %
	$(SED) -e 's/ /_/g' -e 's/./ & /g' < $< > $@

#typos.vocab.chars.src: train.correct.chars train.incorrect.chars \
#					   validate.correct.chars validate.incorrect.chars \
#					   speller.charbased.yaml
#	$(ONMT_BUILD_VOCAB) -config speller.charbased.yaml

#typos.vocab.chars.tgt: typos.vocab.chars.src

#speller.charbased.model: typos.vocab.chars.tgt
#	$(ONMT_TRAIN) -config speller.charbased.yaml
#	cp -v speller.charbased.model_step_100000.pt $@

# include $(top_srcdir)/../giella-core/am-shared/tools-spellcheckers-neural-dir-include.am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
